{"hash":"2ada75edf84596777036f577cc8d2e9a7fa5c7bc","data":{"blog":{"title":"(翻译)Scalene - 一个 Python 的高性能 CPU 内存分析器","path":"/posts/scalene-python-cpu/","image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/sergio-souza-mvb51ThjvRA-unsplash.872e63c.21c81be30c0705f173d0a2b3e99d5aff.jpg","size":{"width":1600,"height":800},"sizes":"(max-width: 1600px) 100vw, 1600px","srcset":["/assets/static/sergio-souza-mvb51ThjvRA-unsplash.bb17b12.21c81be30c0705f173d0a2b3e99d5aff.jpg 480w","/assets/static/sergio-souza-mvb51ThjvRA-unsplash.b28baf0.21c81be30c0705f173d0a2b3e99d5aff.jpg 1024w","/assets/static/sergio-souza-mvb51ThjvRA-unsplash.872e63c.21c81be30c0705f173d0a2b3e99d5aff.jpg 1600w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1600 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ad20debd6b78d594c0aee06ced1b8022'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ad20debd6b78d594c0aee06ced1b8022)' width='1600' height='800' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABAUCAwYBB//EACwQAAIBAwMCAwgDAAAAAAAAAAECAwAEEQUSIRMxQVGRBhUiMmFxgaFi0eH/xAAXAQEBAQEAAAAAAAAAAAAAAAADBAIB/8QAHBEAAwEAAwEBAAAAAAAAAAAAAAECEQMSMSFh/9oADAMBAAIRAxEAPwDzeG8ujjpk48STTTSLd5JS15LLGO%2b5H5/dJU1FcYgkjTJ5wwzVpuZG6rSMWUtsyRk%2bYoOT8E4009ZpL65s44wI9Qu5SONq4/ZBoRtaeCA9NyFHi/xGlDXbbVeGLCuNgJOTnuaitykaIkhl6jDDeG0eQ44%2b1B0KewQdebJL5lb%2bRIFCzaxNKRtMUYznCJz61O9trW2aOKaFzJ0wx2AY3EZ58cChLuCzhlkCw3QROS3kOP7rcqH4jNd16NbTU0mXZc8N4OpOPyKaLdPZS7UYMhG7JUspHrWHN3GrZh3qv1OSasXU3WPAdwfoxArNcG%2bHZ5s9Eu6rormSMYjkdfsaFroNWNaRp4aDS7g3bOsoieRVHTjbsxHgB9vWrLcEXKG4i3Luzko2TyM854NJtMmMN9bv5OPTPNNISj6jbpau43NnJznvQ3ONlEVqQd7Rl/e1y/RKkvyCGLEEdjjjH%2bVKeacCA2kE7hIgH%2bYDg9sHgjt3BqOuCb3owMohDAbt8jLg48fril99qhigNusgnfduMoY4yfIfihhOpnB6amqb%2bBuq6faS9OaMNaCUZfKEpG3Yrkfmld7pNxa7vjSTaAx2nuD2I86AN3N0jEJX6Rbdtzxnzrkd1LH8kjLzniniLlZpPfJFPUsP/9k=' /%3e%3c/svg%3e"},"image_caption":"Photo by Steven Wong on Unsplash","excerpt":"Anxius nec ibimus utque illa circa video est fuit labores alas. Vincere ferociaarva.","content":"<p>by <a href=\"https://emeryberger.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Emery Berger</a></p>\n<hr>\n<h1 id=\"关于-scalene\"><a href=\"#%E5%85%B3%E4%BA%8E-scalene\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>关于 Scalene</h1>\n<p>Scalene 是一个 Python 的高性能 CPU <em>和</em> 内存分析器，它可以做到很多其他Python分析器不能做到的事情。它在能提供更多详细信息的同时，比其他的分析器要快几个数量级。</p>\n<ol>\n<li>Scalene 是 <em>很快的</em>。 它使用采样的方式而不是直接测量或者依靠Python的追踪工具。它的开销一般不超过10-20% (通常更少)。</li>\n<li>Scalene 是 <em>精确的</em>。和大部分其他的Python分析器不同，Scalene 在 <em>行级别</em> 下执行CPU分析，在你的程序中指出对应代码行的执行时间。和大多数分析器所返回的功能级分析结果相比，这种程度的细节可能会更有用。</li>\n<li>Scalane 可以区分在Python中运行的时间和在native代码(包括库)中花费的时间。大多数的Python程序员并不会去优化native代码(通常在Python实现中或者所依赖的外部库)，所以区分这两种运行时间，有助于开发者能够将优化的工作专注于他们能够实际改善的代码上。</li>\n<li>Scalene 可以 <em>分析内存使用情况</em>。除了追踪CPU使用情况，Scalene还指出对应代码行的内存增长。这是通过指定内存分配器来实现的。</li>\n<li><strong>NEW!</strong> Scalene 会生成 <em>每行</em> 的内存分析，以此更容易的追踪内存泄露。</li>\n<li><strong>NEW!</strong> Scalene 会分析 <em>内存拷贝量</em>, 从而易于发现意外的内存拷贝。特别是因为跨越Python和底层库的边界导致的意外 (例如：意外的把 <code class=\"language-text\">numpy</code> 数组转化成了Python数组，反之亦然)。</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#%E5%AE%89%E8%A3%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装</h2>\n<p>Scalene 通过 pip 包的形式进行分发，可以运行在Mac OS X和Linux平台(包括在<a href=\"docs.microsoft.com/en-us/windows/wsl/wsl2-index\">Windows WSL2</a>中运行的Ubuntu)。 </p>\n<p>你可以通过下面的方式安装：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % pip install scalene</code></pre></div>\n<p>或者</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % python -m pip install scalene</code></pre></div>\n<p><em>注意</em>: 现在这样安装Scalene，是不会安装内存分析的库，所以你只能用它来执行CPU的分析。如果要使用它的内存分析能力，你需要下载这个代码仓库。</p>\n<p><strong>NEW</strong>: 你现在可以通过以下命令，在 Mac OS X 上使用 brew 安装内存分析的部分：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % brew tap emeryberger/scalene\n  % brew install --head libscalene</code></pre></div>\n<p>这将会安装一个你可以使用的 <code class=\"language-text\">scalene</code> 脚本（下面会提到）。</p>\n<h1 id=\"使用\"><a href=\"#%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>使用</h1>\n<p>下面的命令会让 Scalene 在提供的示例程序上执行 行级别的CPU分析。</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % scalene test/testme.py</code></pre></div>\n<p>如果你使用Homebrew安装 Scalene 库，你只需要执行 <code class=\"language-text\">scalene</code> 就可以执行行级别的CPU和内存分析：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % scalene test/testme.py</code></pre></div>\n<p>否则，你需要运行 <code class=\"language-text\">make</code> 来先构建一个指定的内存分配器：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % make</code></pre></div>\n<p>在 Mac OS X 系统上进行分析(不使用Homebrew安装)：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % DYLD_INSERT_LIBRARIES=$PWD/libscalene.dylib PYTHONMALLOC=malloc scalene test/testme.py</code></pre></div>\n<p>在Linux系统上分析：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  % LD_PRELOAD=$PWD/libscalene.so PYTHONMALLOC=malloc scalene test/testme.py</code></pre></div>\n<p>执行时增加 <code class=\"language-text\">--help</code> 来查看全部配置：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">% scalene --help\nusage: scalene [-h] [-o OUTFILE] [--profile-interval PROFILE_INTERVAL]\n               [--wallclock]\n               prog\n\nScalene: a high-precision CPU and memory profiler.\n            https://github.com/emeryberger/Scalene\n\n                for CPU profiling only:\n            % scalene yourprogram.py\n                for CPU and memory profiling (Mac OS X):\n            % DYLD_INSERT_LIBRARIES=$PWD/libscalene.dylib PYTHONMALLOC=malloc scalene yourprogram.py\n                for CPU and memory profiling (Linux):\n            % LD_PRELOAD=$PWD/libscalene.so PYTHONMALLOC=malloc scalene yourprogram.py\n\npositional arguments:\n  prog                  program to be profiled\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTFILE, --outfile OUTFILE\n                        file to hold profiler output (default: stdout)\n  --profile-interval PROFILE_INTERVAL\n                        output profiles every so many seconds.\n  --wallclock           use wall clock time (default: virtual time)</code></pre></div>\n<h1 id=\"对比其他分析器\"><a href=\"#%E5%AF%B9%E6%AF%94%E5%85%B6%E4%BB%96%E5%88%86%E6%9E%90%E5%99%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>对比其他分析器</h1>\n<h2 id=\"性能和功能\"><a href=\"#%E6%80%A7%E8%83%BD%E5%92%8C%E5%8A%9F%E8%83%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>性能和功能</h2>\n<p>下面的表格把 scalene 和不同分析器的<strong>性能</strong>做了比较。运行的示例程序  (<code class=\"language-text\">benchmarks/julia1_nopil.py</code>) 来自于 Gorelick 和 Ozsvald 的 <em>《高性能Python编程》</em>。所有的这些结果都是在 2016款 MacBook Pro上运行的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Profiler</th>\n<th align=\"right\">Time</th>\n<th align=\"right\">Slowdown</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><em>original program</em></td>\n<td align=\"right\">6.71s</td>\n<td align=\"right\">1.0x</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">cProfile</code></td>\n<td align=\"right\">11.04s</td>\n<td align=\"right\">1.65x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">Profile</code></td>\n<td align=\"right\">202.26s</td>\n<td align=\"right\">30.14x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">pyinstrument</code></td>\n<td align=\"right\">9.83s</td>\n<td align=\"right\">1.46x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">line_profiler</code></td>\n<td align=\"right\">78.0s</td>\n<td align=\"right\">11.62x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">pprofile</code> <em>(deterministic)</em></td>\n<td align=\"right\">403.67s</td>\n<td align=\"right\">60.16x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">pprofile</code> <em>(statistical)</em></td>\n<td align=\"right\">7.47s</td>\n<td align=\"right\">1.11x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">yappi</code> <em>(CPU)</em></td>\n<td align=\"right\">127.53s</td>\n<td align=\"right\">19.01x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">yappi</code> <em>(wallclock)</em></td>\n<td align=\"right\">21.45s</td>\n<td align=\"right\">3.2x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">py-spy</code></td>\n<td align=\"right\">7.25s</td>\n<td align=\"right\">1.08x</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">memory_profiler</code></td>\n<td align=\"right\"><em>> 2 hours</em></td>\n<td align=\"right\"><strong>>1000x</strong></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">scalene</code> <em>(CPU only)</em></td>\n<td align=\"right\">6.98s</td>\n<td align=\"right\"><strong>1.04x</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">scalene</code> <em>(CPU + memory)</em></td>\n<td align=\"right\">7.68s</td>\n<td align=\"right\"><strong>1.14x</strong></td>\n</tr>\n</tbody>\n</table>\n<p>这个表格是其他分析器 vs. Scalene 的<strong>功能</strong>比较。</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Profiler</th>\n<th align=\"center\">Line-level?</th>\n<th align=\"center\">CPU?</th>\n<th align=\"center\">Wall clock vs. CPU time?</th>\n<th align=\"center\">Python vs. native?</th>\n<th align=\"center\">Memory?</th>\n<th align=\"center\">Unmodified code?</th>\n<th align=\"center\">Threads?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code class=\"language-text\">cProfile</code></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">Profile</code></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">CPU time</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">pyinstrument</code></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">line_profiler</code></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">pprofile</code> <em>(deterministic)</em></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">pprofile</code> <em>(statistical)</em></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">yappi</code> <em>(CPU)</em></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">CPU time</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">yappi</code> <em>(wallclock)</em></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">wall clock</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">py-spy</code></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\"><strong>both</strong></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">memory_profiler</code></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">scalene</code> <em>(CPU only)</em></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\"><strong>both</strong></td>\n<td align=\"center\">✔</td>\n<td align=\"center\"></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n<tr>\n<td align=\"right\"><code class=\"language-text\">scalene</code> <em>(CPU + memory)</em></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\"><strong>both</strong></td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n<td align=\"center\">✔</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"输出\"><a href=\"#%E8%BE%93%E5%87%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>输出</h2>\n<p>Scalene 打印被分析程序中带注释的源代码，以及程序在同目录和子目录使用到的任何模块。下面是一个来自 pystone.py <code class=\"language-text\">pystone.py</code> 的片段，只使用了CPU分析：</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    benchmarks/pystone.py: % of CPU time = 100.00% out of   3.66s.\n          \t |     CPU % |     CPU % |   \n      Line\t |  (Python) |  (native) |  [benchmarks/pystone.py]\n    --------------------------------------------------------------------------------\n    [... lines omitted ...]\n       137\t |     0.27% |     0.14% | def Proc1(PtrParIn):\n       138\t |     1.37% |     0.11% |     PtrParIn.PtrComp = NextRecord = PtrGlb.copy()\n       139\t |     0.27% |     0.22% |     PtrParIn.IntComp = 5\n       140\t |     1.37% |     0.77% |     NextRecord.IntComp = PtrParIn.IntComp\n       141\t |     2.47% |     0.93% |     NextRecord.PtrComp = PtrParIn.PtrComp\n       142\t |     1.92% |     0.78% |     NextRecord.PtrComp = Proc3(NextRecord.PtrComp)\n       143\t |     0.27% |     0.17% |     if NextRecord.Discr == Ident1:\n       144\t |     0.82% |     0.30% |         NextRecord.IntComp = 6\n       145\t |     2.19% |     0.79% |         NextRecord.EnumComp = Proc6(PtrParIn.EnumComp)\n       146\t |     1.10% |     0.39% |         NextRecord.PtrComp = PtrGlb.PtrComp\n       147\t |     0.82% |     0.06% |         NextRecord.IntComp = Proc7(NextRecord.IntComp, 10)\n       148\t |           |           |     else:\n       149\t |           |           |         PtrParIn = NextRecord.copy()\n       150\t |     0.82% |     0.32% |     NextRecord.PtrComp = None\n       151\t |           |           |     return PtrParIn</code></pre></div>\n<p>下面是一个启用了内存分析的示例，运行的是Julia的基准测试。第一行是一个“sparkline”，总结了一段时间内的内存消耗。</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    Memory usage: ▁▁▄▇█▇▇▇█▇█▇█▇█▇█▇▇▇▇█▇▇█▇█▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇█ (max: 105.73MB)\n    benchmarks/julia1_nopil.py: % of CPU time = 100.00% out of   9.11s.\n          \t |     CPU % |     CPU % | Avg memory  | Memory      | \n      Line\t |  (Python) |  (native) | growth (MB) | usage (%)   | [benchmarks/julia1_nopil.py]\n    --------------------------------------------------------------------------------\n         1\t |           |           |             |             | import sys\n    [... lines omitted ...]\n        30\t |           |           |             |             | def calculate_z_serial_purepython(maxiter, zs, cs):\n        31\t |           |           |             |             |     &quot;&quot;&quot;Calculate output list using Julia update rule&quot;&quot;&quot;\n        32\t |           |           |          18 |       0.74% |     output = [0] * len(zs)\n        33\t |     0.44% |     0.06% |          16 |       1.32% |     for i in range(len(zs)):\n        34\t |           |           |             |             |         n = 0\n        35\t |     0.22% |     0.04% |         -16 |             |         z = zs[i]\n        36\t |     0.22% |     0.07% |             |             |         c = cs[i]\n        37\t |    26.12% |     5.57% |             |             |         while abs(z) &lt; 2 and n &lt; maxiter:\n        38\t |    36.04% |     7.74% |          16 |      85.09% |             z = z * z + c\n        39\t |    12.01% |     2.70% |         -16 |       3.96% |             n += 1\n        40\t |     0.33% |     0.10% |             |             |         output[i] = n\n        41\t |           |           |             |             |     return output\n        42\t |           |           |             |             | </code></pre></div>\n<p>正的内存数代表内存的分配量(以MB为单位)，负的内存数代表内存的回收量。\n内存的使用率代表特定行中总内存分配的活动。</p>\n<h1 id=\"致谢\"><a href=\"#%E8%87%B4%E8%B0%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>致谢</h1>\n<p>Logo由 <a href=\"https://www.linkedin.com/in/sophia-berger/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sophia Berger</a> 创作。</p>\n","humanTime":"16 April 2020","datetime":"Thu Apr 16 2020 12:00:00 UTC+00:00","timeToRead":7,"tags":[{"id":"Python","title":"Python","path":"/tags/python/"},{"id":"Profile","title":"Profile","path":"/tags/profile/"}],"category":{"id":"Technology","title":"Technology","path":"/category/technology/","belongsTo":{"totalCount":5,"edges":[{"node":{"title":"PySpark UDF的坑与绕","path":"/posts/py-spark-udf/"}},{"node":{"title":"Neo4j schema 索引对查询的影响","path":"/posts/neo4j-schema/"}},{"node":{"title":"(翻译)Scalene - 一个 Python 的高性能 CPU 内存分析器","path":"/posts/scalene-python-cpu/"}},{"node":{"title":"Scrapy分布式爬虫，分布式队列和布隆过滤器，一分钟搞定？","path":"/posts/scrapy/"}}]}},"author":[{"id":"insutanto","name":"许臾insutanto","image":{"type":"image","mimeType":"image/png","src":"/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png","size":{"width":400,"height":374},"sizes":"(max-width: 400px) 100vw, 400px","srcset":["/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png 400w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 400 374' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f)' width='400' height='374' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAYAAADWibxkAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPRUlEQVRo3tVbB1hUxxa%2buwsCgtgLoiAqRkUTgxp8ir0HJYkFC3ZQ0YiKxoai2BsqCMEawW6sqIgIdo2YqNEYjf0ZWxJLTGKJyO6dk3Nm76zXdfHxlDWw33e%2bubvsXmbOnPL/58yVJOu8NBY%2bK4/SASUC5SuU7Si7UL5GiUYZiVIPpZAir7tXnn5plfF9lFiULii7UZ6iQA7kIcofKKtQiudHJYjJLrewOBklC0WPYlBEr/rM/PvH8tvui8UXQ7mlLEKvCFMJ/I/3sqIcUFwm31mBLcp5ZQEGswXy3dVqNXzUaNTXGrzWMvpMsQoa481cK0%2b/dMoYrFo8U5u1VqMxXeu0WovXigXQ%2bBilTH60gGNmu2/aYbHY9s0%2b4tfDevtDF7%2bG/NqvSV3wb%2b7Dijg76m1tbeizhPy0%2b2KHKis7J3aSqU2%2bf5fWsGLWMICbe2DGyN5wLiUe4P4hWDJ1CBzdMAfgzl72%2bMymrFmj%2btD3h9MNnQra2%2bQn829lbv42Njq%2b%2bPc8XIFd3gnw636QL%2b3gI1zb9eL6%2bm7I%2bimJwe9H9N98PZd%2bM5RuWLF8mXylgJ6q6P%2bSz%2b9bNR13Pg2endsKcCUZDBd3oGwH/YXt8PynJNDjtYGUcX23/tdjq6F4kULr6Yb%2bzXx0%2bSEGCAX0EwpAn2di52MnhvDFw610gBt7%2bIKzLiTxa7779DeSq7sYuoGMbgCeFcpeUwXBfGMB7RSz57m/RDFnoN2Eh0cAbqfDnoSpEDNhACydHgrLUBZP%2bRw2x4XDD8lxcARjQFriVDZ6QCc2LiQAqni4PqM0qNNp%2b1MoQCmQ5yEwBrsW6rxfq1pFSFkeCVu%2bDOcBcMqwQDi9YyHMGxcMwQGtwLeOF2CQg/IuJcCjXGkoW6oY/61v7erQsXUDiiMVbW1sxit8IW9D46oVy1GwiiroYPckqHNLcHZy4C5wfnc8PDq9EVZHjYSMTVGAQQ4WjO/P40Lqiim4%2b7EwvM8ncO/4WmjRoBZXwM3DCYwURgQJ79cVxxp5OiVibhcTmzRtRE84mxxniIkYyN5/rwLcPb4GXeAonNi2ANITpwE8OAyX05fCkB7tMCakwffbY7hy4LcDkDg7DOImhTBMjXJIt7akgOYOdgUoHZbK29jXRicUsPHbLfMpr%2bu7t2/M4OdUkCn1Yd4/uysOVs4JA/jjKM8CcHsvwN2DHA/8hRbyCAMfAiG4kLqIQeZJGNClDcHh%2bQXt7YLyPCBC3xdBMAp3EODZCf2ZnbE8tfHFKjLzi95wcM1Mivb8/Vczh8EKlITZw%2bHktmjo06E5hA8KYIfWzmLN639AFrDmkxY%2b9vkBDovdqVfZvSxcSl9CKY/Jl3YyAj84cqDz8OQGiJ88GOZjEKSAyFEhpsJt8eN5kNyFARO/x46sn8M8ypcmBTRQ7psvwJBQAkVsmDum33P0d0Y5H3ebKwP%2bu5vgLjw/vw1xwHZ%2bza3jl31Gl0BlIBhi8OS4/vMefqSA8crW6/I%2bEFACIebtDYL0HFo3i4KbbFLC5Z2Moz1ygavJHPmRhRAoEmgwi76LcHh%2beDApYAndE%2bNAviBE4uVZwNZmAtUEihRyfEppEO4dNBD0JSXggpmICZwb8ICYzkkR3EhlZB2ogKyRQZ%2bRAqZyC9DkAwvI5tW7ZLHCPMAh1JWJ%2bMjKrovF0/tTSTFs3rggRimRGCHyBYMSAxrmJ0psigXoBuoJBzes4/VQifwypkSMBSkm8oMpkG2KHQdRY4Pg/nfrZMQMz4M7t6LFrxXRP3/Vw2x0NF9tJbcyArtrqlYqd/HvH7dA5vlt8r7VMxghQwI%2bnCP8%2bQ3A4%2bOMxgt7FkPbxnVo8Wlenm4OeTb94ST5OH1ELypYCDKUnZ%2bu2LhwLLE%2bPVkBcf0%2bHVog0GkNE4d0YxMGd2EDurZBXlCdgM8NivzHN8/T5lnTb1qvJh%2bRwGgsLdrJ0Z4obMvK7i5%2bzk4FF6GScPH7yP95FsCAx578sBm%2bjhkDYX0/ZYO6fyz369SSCNH1aWE9y6rvhawybyoBCYpp4ZXcXBxx%2bJjyP2rkWxwfFS5UECiKI6IjQCRT5FeCnjENXktRXOCo0QX%2bOibHRw6C6pXdTtkXsA0kBUrG5oqU1yxBg4vjPonU1cWlVLFoDHg3pVebGmz9gtEyQWL0e9PiReSnkdIi5n8OlDIp9T08Ki%2bfMdS8epyKUsGs5pB7LxudTmrl%2b6HpfVri1JwUPnnlR6PRPJBe7foYMGSbmhxJiyYwxAC81qdevNnIhGU08K7GO0bILdR9hDsoHla1hKLOTpr6H1bV1qtVVRs9vr8GkQj//FRStKWvf6laeJaq%2bmvq8ogdpGrwjiURBIR47U9WLV4IL43dPciIBCkIUt0lylTu%2bZ21soFFja5bMEqLuVmHnFyHKUynYnsxqqKnLFno%2bkhm3R%2bShFnDcZEHTKYvkCCHyKiczYgDzF1IdU/RJRqX666A5j8WI%2b9ZvHT%2bz4dVGyF0bYVSxNJ3HeztPlPaVuqOj8XFSxY6QeEhAUD1ARLadb7zuPiDa2eaSuca1fdV9xWK/hPFNTtsgPhDKl7UmV8XK%2bwkYQbi17ie7BXgUa5021VzRwAyr9Of92h3//ukGCpY3sTcnNapTYPJ6JO98cbN8KvuKCeNO6s1mE3wtUKLUhQHbRrVht8y1hjZH1pEWsJUsCtg%2b4rFWFCCsIK5lqwA7yF1bF1fXKMLA8kLoqZ7YegfVPWQEmeHmd67IG19uiUunLeo1s0fZTibHAfXD3wFVJq%2beTgBftgZCynLJz9Gd2CoTdHpydHi1YKT4GOp4kUgdcVkXgyx5C7ZKEFYwT2UEmorqOHpbloMAqzX1g1mjOylJeUE%2bjfRmpT4RVCHbcTLMQM8q%2b1VWR7Vv6N8OX2pgSO32%2bl6/JuBandIZtiNQwmsbePaOZn0a5WQnZu8RgGmZgvKIHMr8HQvq45ldpGh3VMGB/pNozdozba446%2bNG85ThvfIQIwOsZNCYEP0aP2G6DGGi3sWs79/3Mooj/%2bUukhOXzmNURX39xPrWcO6Xm%2bsBLFgjdIez%2bHvmPSi2XpQbQEInkQ80Hl7VQpEKz5DwTa0V/tQ86yPOx8a2rP94bEDOxPLDFNnAbv2zT6a49e07uM9CVPg6r5lQAwtY1OUjEGL8ciNIxUvqXIze1RfPjEbCztqJVEHW0qNVWjShZ0Kip2tgOn71MNTG3j3adYXfe7iZ22Qp9QuU6KoX9d2jSbNGd33PDVcIod2Bwz4T/DvC0SAUJtP%2baKFnUagRRzau3Ja5r1v1/JaHvy2n4l%2bHkFYKmJaiNrvQoQb9KHJLpseastr8aHd1lK5HV02kxjnnaMr9ed3x%2btPbF0g/3xwBY9lR9bPhi8jB2UGfOwrlyjqfBV/liR5e1Xmqy5ga6OZPDTQ3E88alWr2BEj9y9UzX12bqvMlBL3KcwW73jhwgqEApbRBAF%2b5EEvduLADCqxI9gycGRJm3b3gIw0Ww%2bPMgxUlqOyO%2bIbaNPQG9xcStJ95ovF8xG1IhVyctAgj7cByBRWUVIyntyC7YsjZF7EvJoMZGqlihc2HXN5hwowjwMSblI3XoW%2bsUdGBVAvguYpUyZLnBMGo4I7UIZ76lu7%2bq33PFzTypUpEUmNrFci4fSwXpJRqyChaesUrtAehYMf5PSM8jev9SOvb%2bJTUwmE2n9DARcRYtPOlURafV/hGzL6v%2bHBiXXQt2MLKOTosF8yHrJornAJu5ygYPNu71Dhe5za3k43Mjf8h8jjs01tVlSArPxPwgNOo/t3XMXb6leSs8gCfs1YDdUqlSci42dpUbS5bmVL6tBqtTniCGgJUfQ75P/6W0cSeauL43cMhIsmD37jVPg2SlD%2b312k4%2bHX9i8n06csRdmKkCYpyJfmjllN6%2bhgZ4NpV/smROqlGn9972p6weK4C2CqObZx7jsNgsqROhMoipsU8pwC37Nz26iZqqcKE34%2bW%2bEFto4O9lKbRt5vRpIwMHIF2BewXUT/MGJIVwOaPaNuDj/Tg9r%2b5dgqcCro8M6zAeZ21rTe%2b8Z5XElmvNKMm4NUnuoTpd%2b6kFrPu4rUr1NLHgMihwa2RvyMux1lQADERCeHguDf57ZCjSruOYWzb7HzxntX8XCF/atnsE0Lx8KZHbG8tqjQaT0dwhDApnAhR52aCP3fr8Yf1cC8GsIVED4oICQmYgARIz3V8kURgzc70Qpa%2bXpbOuiYqyKCLHIUjkJ5lelaChVXGBVa6TNkrpQdauZK1cjezlZCisxv0qB29ZmInoi%2b6jHQMFMcoMYm%2bl%2bPT5paPROIe1Pj5PC62RzVGeE55vxb6XpCeshS02i%2bGAc0RI3fstevRYJRXmhxJR1eEgoQdTxezLh/iAiH1RUgsszEId0ASRm3POog60kB9w8Zoo3HbYKU2JU71SKEvlwB7q6lNvMjLjfTDOqeXpZiAWMHdrK6CwgF0HkCyj7KPHghldwSER49X%2bCSq10kxM9cAZ3b%2bm7k9btrKXp1NfeFAjpbXQFC%2bAErhOJkifwMAVolNVNRQZtprv7NfbS5ZQCEmLgCggNapRP8xUUb1G1t4QJDe/tb1QUEzyji7AjX0df5maNLO03mHxnanf4ekOvF0hcKaH2YTnIqCoCXg%2bABCPRvYmUFGM2fzg/S8RoyeX7S5OoumTJRnRqVqZfopKBWTS4qwMgGe37aNIUfZ72SbLIAU2//HRAigS8qubkYzxGj33MkeveAns4eU7iieRK%2bF1XgXHld3ruUKwCh5BJqayO/Nij9PcYxAO4E7UiZkkWtSomFArw83XAOqTz48XSMbtnz02Z0lNbTKi30D6p6cH9CMjFYOfGl54GHWlg0AWSFVGGxduATGaBuTU%2be%2b/nu39mrv5i2mAjaSiPp8dGii1itY1Rt3rigx/DHUUJdpASZiqQYgBgdbyV2pmQAZg0RPUJUAOMKoIIHxqT%2bXVpTRae61fqF/s18pDlj%2bvEbV3AtNf/4pnnGY%2b1UEXp4BC6lLZGRlPDH3zQvngzLqRiklx%2bby1bQBfiInEPGmEOELPP45nmk8Fk0N3SNd3J4SoOLHYYRP2NhxMAHsRMHPlEOMFmVBKnv71q6uPHZAuQACM9PS8Yn0/6V4zPuSnkpAif3DY7pkvHJUHoUdhPKGsn4aGy8ws6In09HmYwyUTI%2bBzheJfR%2bkmQ8DjdDaX0tRFmMkojBleoRO5v61LyKgfh7ZH1UyKyUW6b/D5iHXD7Pi%2bNmAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"path":"/author/insutanto/","bio":"又一个喜欢摄影和音乐的程序员。Java、Python双修，A6000系列、A7系列的索尼玩家，最近痴迷Rap。"}]},"related":{"edges":[{"node":{"title":"Python memory profiler 上手实践","path":"/posts/python-memory-profiler/","image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/josh-spires-dronenr-sQalFlXIsLs-unsplash.872e63c.033fae86f3b02df16933a32c19ebf5e9.jpg","size":{"width":1600,"height":800},"sizes":"(max-width: 1600px) 100vw, 1600px","srcset":["/assets/static/josh-spires-dronenr-sQalFlXIsLs-unsplash.bb17b12.033fae86f3b02df16933a32c19ebf5e9.jpg 480w","/assets/static/josh-spires-dronenr-sQalFlXIsLs-unsplash.b28baf0.033fae86f3b02df16933a32c19ebf5e9.jpg 1024w","/assets/static/josh-spires-dronenr-sQalFlXIsLs-unsplash.872e63c.033fae86f3b02df16933a32c19ebf5e9.jpg 1600w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1600 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e4a56daf83daf6a40719aef386847469'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e4a56daf83daf6a40719aef386847469)' width='1600' height='800' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABQYDBAcACP/EAC8QAAEDAwMCBAQHAQAAAAAAAAECAxEABCEFEjEGEyJBQlFhcYGxBxQkMjNicuH/xAAZAQADAAMAAAAAAAAAAAAAAAABAgMABAb/xAAfEQACAQQCAwAAAAAAAAAAAAAAAQIDERJRBDFBQmH/2gAMAwEAAhEDEQA/AH21uELnYvA9R4NE2HUYCnEhR8jzWG6Z1WhKDKiVn1SQPlzTZo/VjLgTvWobcCFTU25LwFcmi/Y1JDkubE%2bKEyTuGPgRzUja3e2CppW7EhBChkxzjjk0gs9QW61Elx0BUTC/%2bUROvtpT4XjtAwMc/Shl8Cq1J9SHJHcVIUkoIURmPEPcZqH8wpNz2lJUPDO4pMTMRPvSqnqSxaT3Hn20FUSpcgmOPnXN9V2zqS63eNKgTGZI%2bAiaGY947Q3plW9SiNsYqi6ShRIjaeKWldSbFAB1slXpcPP0rr3VlsN2zrsLYcR3Uq3%2bYMEH706mhrX6Z5ptVJgAkCjdooBOFBJnAnFJTFwUjkY5q/b3hTkHFVZz0k0aBbEED9QQR7cUUQVHi5kxWesantR/IAMCD51YRrBEQsfCDihYg5PQ/KW8Ekd5KhyAJECqFzcXST4Vmf8AVKitacCcKMgcVCrWnFKUCfKhgUjUYZvNRvArKlx77uKJahfPXf4aMukq3afqKmVEH0OiR9Jikt/Uy42f3A%2b05o10jejUNC6q0k5LtkLppP8Adoz9qzGxucabbcdo/9k=' /%3e%3c/svg%3e"},"image_caption":"Photo by Josh Spires on Unsplash","excerpt":"Python memory_profiler 上手实践，使用服务作为示例。将 memory_profiler 用在 Flask + gevent 的服务和 Flask + gunicorn gevent worker 的服务上。","content":"<h2 id=\"说在前面\"><a href=\"#%E8%AF%B4%E5%9C%A8%E5%89%8D%E9%9D%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>说在前面</h2>\n<p>这篇文章的有一部分来自 memory_profiler 官方文档，是在我亲自实践之后，做整理和总结。</p>\n<h2 id=\"为什么\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>为什么</h2>\n<p>相比起 C ，Python 有自己的内存管理，不需开发者自己管理内存。虽然方便，但有时候，我们可能会遇到内存占用过高，内存泄漏，甚至 OOM 的情况。这时，就需要我们做内存诊断，了解自己的代码：内存主要被分配在哪里，是否有无法释放的内存，又有多少内存会很快被释放，进程在高峰时占用多少内存，在低谷时占用多少内存。</p>\n<h2 id=\"怎么办\"><a href=\"#%E6%80%8E%E4%B9%88%E5%8A%9E\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>怎么办</h2>\n<p>要了解进程的内存使用情况，我们可能首先会想到使用 TOP 命令，查看进程内存的使用情况。TOP 命令能够实时查看到进程对各种资源的使用情况，也是我们经常会使用的Linux命令。而在 Python 中，通过 psutil 模块也能很好的获取到这些信息。</p>\n<p>这两个工具十分的强大，但是也很基础。TOP命令不方便从更多的维度诊断问题，比如难以从时间维度诊断内存，只能统计当前整个进程的内存使用情况，与代码脱离。而 psutil 十分强大，可以和代码结合，但是对逻辑代码侵入性太强，比如想在某个函数前后统计内存的使用情况，就需要在原有代码的基础上插桩，产生不必要的耦合，而不侵入逻辑代码则又和使用命令行没有太大区别。</p>\n<p>这个时候，有经验的朋友可能会想到 line_profiler。line_profiler 是用于对函数进行逐行分析的模块，只需要通过装饰器，就可以计算出函数内每一行代码的执行时间，以提供时间维度的性能诊断。那么在内存维度上，是不是也有类似的模块呢？bingo~答案是肯定的，在 Python 众多功能强大的模块中，有一个叫做 memory_profiler 的模块，只需要给目标函数装上profile装饰器，就可以逐行分析函数代码的内存使用情况。不仅如此，这个模块还有更加强大的功能等待大家发掘。</p>\n<h2 id=\"memory_profiler-是什么\"><a href=\"#memory_profiler-%E6%98%AF%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>memory_profiler 是什么</h2>\n<p>首先我们简单介绍下 memory_profiler 是什么。这部分主要来自 memory_profiler 的 PyPI 介绍。</p>\n<blockquote>\n<p>This is a python module for monitoring memory consumption of a process as well as line-by-line analysis of memory consumption for python programs. It is a pure python module which depends on the psutil module.</p>\n</blockquote>\n<p>memory_profiler 是一个监控进程内存消耗的模块，也可以逐行分析 Python 程序的内存消耗。它是一个依赖 psutil 模块的纯 Python 模块。</p>\n<p>memory_profiler 有两种应用场景，三种使用方式。</p>\n<p>两种应用场景分别是：逐行的内存使用分析，时间维度的内存使用分析。后面再详细说。</p>\n<p>三种使用方式中，前两种是针对逐行的内存使用分析，另外一种针对时间维度的内存使用分析。</p>\n<p><strong>只使用装饰器，不 import memory_profiler</strong>。给目标函数加上 @profile 装饰器，执行代码时，给 Python 解释器传递参数 -m memory_profiler ，来加载 memory_profiler 模块。</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@profile</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">del</span> b\n    <span class=\"token keyword\">return</span> a\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    my_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python -m memory_profiler example.py</code></pre></div>\n<p><strong>使用装饰器，import memory_profiler。</strong>给目标函数加上 @profile 装饰器，import memory_profiler，执行时不需要传递参数。</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> memory_profiler <span class=\"token keyword\">import</span> profile\n\n<span class=\"token decorator annotation punctuation\">@profile</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">del</span> b\n    <span class=\"token keyword\">return</span> a</code></pre></div>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python example<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p><strong>时间维度的内存使用分析。</strong>使用 mprof 执行程序在时间维度分析进程的内存使用情况。下面介绍了一共有四种情况，分别是：单进程，多进程，记录子进程内存占用，多进程并记录子进程内存占用。</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprof run <span class=\"token operator\">&lt;</span>executable<span class=\"token operator\">></span>\nmprof run --multiprocess <span class=\"token operator\">&lt;</span>executable<span class=\"token operator\">></span>\nmprof run --include-children <span class=\"token operator\">&lt;</span>executable<span class=\"token operator\">></span>\nmprof run --include-children --multiprocess <span class=\"token operator\">&lt;</span>executable<span class=\"token operator\">></span></code></pre></div>\n<p>执行完成后，会生成一个 .dat 文件，类似：</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprofile_20200329173152.dat</code></pre></div>\n<p>要绘制内存在时间维度的使用情况，需要安装 matplotlib，然后执行 mprof plot (直接执行会读取最新的 .dat 文件)：</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> matplotlib\nmprof plot\nmprof plot mprofile_20200329173152.dat</code></pre></div>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b16fa4d8-5ca3-4e77-85c9-ce591a1036f7/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313930383631382f3836313332302f63623865376337382d663563632d313165322d386531652d3539373237623636663462322e706e67.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b16fa4d8-5ca3-4e77-85c9-ce591a1036f7/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313930383631382f3836313332302f63623865376337382d663563632d313165322d386531652d3539373237623636663462322e706e67.png\"></p>\n<p>也可以查看火焰图：</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprof plot --flame mprofile_20200329173152.dat</code></pre></div>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7840bad5-07d4-46ba-8cbd-b7e9083c445b/flamegraph.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7840bad5-07d4-46ba-8cbd-b7e9083c445b/flamegraph.png\"></p>\n<h2 id=\"实践经验\"><a href=\"#%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>实践经验</h2>\n<p>memory_profiler 只介绍了脚本程序的实践，曾让我以为他只能作为普通程序的实际上，他可以在任何场景下使用，包括服务，这里为了丰富示例，我使用服务来进行相关实践。</p>\n<p>我们使用 mprof 启动一个服务后，服务进程会持续运行，在这期间，我们可以通过测试工具，模拟出服务在生产环境的运行情况，来分析服务的内存使用状况。下面列出了三种会遇到的使用场景，每种场景的表现都是不一样的。单进程服务我们使用了 Flask 和 Gevent，多进程服务我们使用了 Flask + Gunicorn 的 gevent worker。</p>\n<h3 id=\"单进程无装饰器\"><a href=\"#%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%97%A0%E8%A3%85%E9%A5%B0%E5%99%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>单进程无装饰器</h3>\n<p>因为收集每一行代码的内存使用情况是不现实的，所以，单进程不使用装饰器时，只能收集到整个进程的内存使用情况。这种场景是无侵入的，一般对应了我们自测的初始阶段，我们想对服务或者脚本内存的使用情况有一个初步的了解：是否会有内存泄漏，是否会占用过大的内存等等问题。</p>\n<p><strong>服务代码：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> monkey\n<span class=\"token keyword\">from</span> gevent<span class=\"token punctuation\">.</span>pywsgi <span class=\"token keyword\">import</span> WSGIServer\nmonkey<span class=\"token punctuation\">.</span>patch_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n<span class=\"token comment\"># from memory_profiler import profile</span>\n<span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> time\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    list1 <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    list2 <span class=\"token operator\">=</span> test2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, world\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span> \n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span>\n    big_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    big_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span>\n    delay<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> big_list\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span> \n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span>\n    big_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    big_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span>\n    delay<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> big_list\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>delay_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>delay_time<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>url_map<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    http_server <span class=\"token operator\">=</span> WSGIServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span>\n    http_server<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>执行 mprof run:</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mprof run server<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p><strong>使用 curl 请求多次后，执行mporf plot：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mprof plot</code></pre></div>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/607824df-8208-4e85-9dc0-ee8ba0001052/single_process.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/607824df-8208-4e85-9dc0-ee8ba0001052/single_process.png\"></p>\n<p>在时间维度上的单进程内存使用情况，可以很清晰的体现出来。这时，如果我们发现了过大的内存消耗，长时间没有释放的大内存，可能就需要对单进程添加装饰器来进一步分析了。</p>\n<h3 id=\"单进程加装饰器\"><a href=\"#%E5%8D%95%E8%BF%9B%E7%A8%8B%E5%8A%A0%E8%A3%85%E9%A5%B0%E5%99%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>单进程加装饰器</h3>\n<p>我们使用 mprof 直接 run server.py，发现了比较大的内存消耗，或者长时间没有释放的大内存，又或者在一轮请求中遇到耗时绝对值过大等性能问题，就需要考虑给服务相关的代码加上装饰器来定位了。</p>\n<p><strong>加装饰器时，要注意一点。不要加入下面的代码：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> memory_profiler <span class=\"token keyword\">import</span> profile</code></pre></div>\n<p><strong>下面是服务代码，也就是在我们主要的函数上增加 profile 装饰器：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> monkey\n<span class=\"token keyword\">from</span> gevent<span class=\"token punctuation\">.</span>pywsgi <span class=\"token keyword\">import</span> WSGIServer\nmonkey<span class=\"token punctuation\">.</span>patch_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n<span class=\"token comment\"># from memory_profiler import profile</span>\n<span class=\"token keyword\">from</span> gevent <span class=\"token keyword\">import</span> time\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    list1 <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    list2 <span class=\"token operator\">=</span> test2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, world\"</span>\n\n<span class=\"token decorator annotation punctuation\">@profile</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span> \n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span>\n    big_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    big_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span>\n    delay<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> big_list\n\n<span class=\"token decorator annotation punctuation\">@profile</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span> \n    new_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4096000</span>\n    big_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    big_list<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span>\n    delay<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> big_list\n\n<span class=\"token decorator annotation punctuation\">@profile</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>delay_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>delay_time<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>url_map<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    http_server <span class=\"token operator\">=</span> WSGIServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span>\n    http_server<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>执行 mprof run:</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mprof run server<span class=\"token punctuation\">.</span>py</code></pre></div>\n<p><strong>使用 curl 请求多次后，执行mporf plot：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mprof plot</code></pre></div>\n<p>如果在服务代码中，你添加了 profile 装饰器的 import ：</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> memory_profiler <span class=\"token keyword\">import</span> profile</code></pre></div>\n<p>你会得到下面这样的图：</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22a4f39a-b5c5-4151-b1c4-afcd56789762/single_process_with_profile_decorator_and_import.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22a4f39a-b5c5-4151-b1c4-afcd56789762/single_process_with_profile_decorator_and_import.png\"></p>\n<p>和官方示例的图似乎不太一样？我们期待的函数执行时间和函数执行前后内存消耗的标记没有了？在我实践之后发现，这是一个坑，加入 import 的代码，只会对代码进行逐行的内存消耗分析，而不能得到内容丰富的图例。</p>\n<p>我们去掉 profile 装饰器的 import 代码，再回到这里来看看，会得到类似下面这张图。</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b722de99-ac8e-4626-ba86-96ae78207bb3/single_process_delay_with_profile_decorator.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b722de99-ac8e-4626-ba86-96ae78207bb3/single_process_delay_with_profile_decorator.png\"></p>\n<p>这下是不是就清晰多了？我们能够看到在函数test1执行的期间，函数delay占用了大部分的时间，函数test1执行之后，内存回收了一部分，然后接着执行函数test2。哪些代码消耗内存多，哪些代码执行时间长，是不是就一目了然了？</p>\n<p>然后我们还可以执行：</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprof plot --flame</code></pre></div>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4082b47a-d333-4ddb-8514-29079fec6c05/single_process_flame_with_profile_decorator.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4082b47a-d333-4ddb-8514-29079fec6c05/single_process_flame_with_profile_decorator.png\"></p>\n<p>能够清晰的看到火焰图的深度只有两层，看火焰图的平顶，函数test2 中的函数 delay 执行时间更长，“性能更差“，内存占用在函数 test2 执行的过程中达到了峰值。</p>\n<h3 id=\"多进程\"><a href=\"#%E5%A4%9A%E8%BF%9B%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多进程</h3>\n<p>我在实践的过程中发现，多进程无法在不 import memory_profiler 的情况下使用装饰器。所以多进程的场景，只能统计每个进程的内存使用情况。不会有函数执行时间，也不会有函数执行前后内存变化的标记，更不会有火焰图。看了官方的示例，也没有发现这些功能在多进程有得到支持的相关证据。索性我们就先不管这些高级的特性，毕竟能够支持多进程和子进程的内存监控，至少能让我们了解多进程程序运行的内存消耗了。</p>\n<p>因为直接使用 gunicorn 作为 WSGI Server，服务代码和“单进程无装饰器”一样，就不做赘述了。</p>\n<p><strong>下面是gunicorn的配置文件内容：</strong></p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># gunicorn_config.py</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> gevent<span class=\"token punctuation\">.</span>monkey\ngevent<span class=\"token punctuation\">.</span>monkey<span class=\"token punctuation\">.</span>patch_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> multiprocessing\n\nloglevel <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nbind <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:5000\"</span>\npidfile <span class=\"token operator\">=</span> <span class=\"token string\">\"logs/gunicorn.pid\"</span>\naccesslog <span class=\"token operator\">=</span> <span class=\"token string\">\"logs/access.log\"</span>\nerrorlog <span class=\"token operator\">=</span> <span class=\"token string\">\"logs/debug.log\"</span>\ndaemon <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\nworkers <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nworker_class <span class=\"token operator\">=</span> <span class=\"token string\">'gevent'</span>\nx_forwarded_for_header <span class=\"token operator\">=</span> <span class=\"token string\">'X-FORWARDED-FOR'</span></code></pre></div>\n<p>执行 mprof run 命令，这里需要添加相关的参数，不同的参数，结果图示也会相应有所不同：</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprof run gunicorn -c gunicorn_config.py profile_server:app\nmprof run --multiprocess gunicorn -c gunicorn_config.py profile_server:app\nmprof run --include-children gunicorn -c gunicorn_config.py profile_server:app\nmprof run --include-children --multiprocess gunicorn -c gunicorn_config.py profile_server:app</code></pre></div>\n<p>执行几次 curl 请求之后，执行 mprof plot:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mprof plot</code></pre></div>\n<p>按照步骤2的不同命令，分别展示对应的图：</p>\n<p><strong>不添加任何多进程相关的参数：</strong></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b06d170c-4405-4b68-8ece-4923f55c187f/multi_process_without_option.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b06d170c-4405-4b68-8ece-4923f55c187f/multi_process_without_option.png\"></p>\n<p>我们发现只有主进程的内存消耗统计。</p>\n<p><strong>添加 --multiprocess 参数:</strong></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1361f499-91f2-4fd6-af0b-445b1a59a5c6/multi_process_delay_with_multi_process_option.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1361f499-91f2-4fd6-af0b-445b1a59a5c6/multi_process_delay_with_multi_process_option.png\"></p>\n<p>这种情况，我们就能看到我们多进程服务的两个worker的内存消耗了。</p>\n<p><strong>添加 --include-children 参数：</strong></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3770c084-6dcc-40c1-96b0-d7bf13abbee6/multi_process_with_children_option.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3770c084-6dcc-40c1-96b0-d7bf13abbee6/multi_process_with_children_option.png\"></p>\n<p>这种情况，只统计了多进程服务的全部内存消耗。</p>\n<p><strong>添加 --include-children 和 --multiprocess 参数：</strong></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8770e8d-da4c-4843-ba71-575e79618278/multi_process_with_children_and_multi_process_option.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8770e8d-da4c-4843-ba71-575e79618278/multi_process_with_children_and_multi_process_option.png\"></p>\n<p>这种情况，统计了多进程服务的全部内存消耗，也统计了两个 worker 进程的内存消耗。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>总结</h2>\n<p>如果在开发中对代码的内存消耗有疑惑，或者想要更快定位出程序的性能瓶颈，绝对可以尝试使用 memory_profiler。除了上面介绍的内容和实践，memory_profiler 还支持通过设定内存大小来进行debug。如果感觉 memory_profiler 的功能不够强大，还可以使用它的 API 来自己扩展和实现更加强大的功能。</p>\n<h2 id=\"相关资料\"><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>相关资料</h2>\n<p>memory_profiler 的 PyPI 链接: <a href=\"https://pypi.org/project/memory-profiler/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pypi.org/project/memory-profiler/</a></p>\n<p>memory_profiler 的 github 链接: <a href=\"https://github.com/pythonprofilers/memory_profiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/pythonprofilers/memory_profiler</a></p>\n","humanTime":"20 March 2020","datetime":"Fri Mar 20 2020 12:00:00 UTC+00:00","timeToRead":12,"tags":[{"id":"Python","title":"Python","path":"/tags/python/"},{"id":"Profile","title":"Profile","path":"/tags/profile/"}],"category":{"id":"Technology","title":"Technology","path":"/category/technology/","belongsTo":{"totalCount":5,"edges":[{"node":{"title":"PySpark UDF的坑与绕","path":"/posts/py-spark-udf/"}},{"node":{"title":"Neo4j schema 索引对查询的影响","path":"/posts/neo4j-schema/"}},{"node":{"title":"(翻译)Scalene - 一个 Python 的高性能 CPU 内存分析器","path":"/posts/scalene-python-cpu/"}},{"node":{"title":"Scrapy分布式爬虫，分布式队列和布隆过滤器，一分钟搞定？","path":"/posts/scrapy/"}}]}},"author":[{"id":"insutanto","name":"许臾insutanto","image":{"type":"image","mimeType":"image/png","src":"/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png","size":{"width":400,"height":374},"sizes":"(max-width: 400px) 100vw, 400px","srcset":["/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png 400w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 400 374' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f)' width='400' height='374' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAYAAADWibxkAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPRUlEQVRo3tVbB1hUxxa%2buwsCgtgLoiAqRkUTgxp8ir0HJYkFC3ZQ0YiKxoai2BsqCMEawW6sqIgIdo2YqNEYjf0ZWxJLTGKJyO6dk3Nm76zXdfHxlDWw33e%2bubvsXmbOnPL/58yVJOu8NBY%2bK4/SASUC5SuU7Si7UL5GiUYZiVIPpZAir7tXnn5plfF9lFiULii7UZ6iQA7kIcofKKtQiudHJYjJLrewOBklC0WPYlBEr/rM/PvH8tvui8UXQ7mlLEKvCFMJ/I/3sqIcUFwm31mBLcp5ZQEGswXy3dVqNXzUaNTXGrzWMvpMsQoa481cK0%2b/dMoYrFo8U5u1VqMxXeu0WovXigXQ%2bBilTH60gGNmu2/aYbHY9s0%2b4tfDevtDF7%2bG/NqvSV3wb%2b7Dijg76m1tbeizhPy0%2b2KHKis7J3aSqU2%2bf5fWsGLWMICbe2DGyN5wLiUe4P4hWDJ1CBzdMAfgzl72%2bMymrFmj%2btD3h9MNnQra2%2bQn829lbv42Njq%2b%2bPc8XIFd3gnw636QL%2b3gI1zb9eL6%2bm7I%2bimJwe9H9N98PZd%2bM5RuWLF8mXylgJ6q6P%2bSz%2b9bNR13Pg2endsKcCUZDBd3oGwH/YXt8PynJNDjtYGUcX23/tdjq6F4kULr6Yb%2bzXx0%2bSEGCAX0EwpAn2di52MnhvDFw610gBt7%2bIKzLiTxa7779DeSq7sYuoGMbgCeFcpeUwXBfGMB7RSz57m/RDFnoN2Eh0cAbqfDnoSpEDNhACydHgrLUBZP%2bRw2x4XDD8lxcARjQFriVDZ6QCc2LiQAqni4PqM0qNNp%2b1MoQCmQ5yEwBrsW6rxfq1pFSFkeCVu%2bDOcBcMqwQDi9YyHMGxcMwQGtwLeOF2CQg/IuJcCjXGkoW6oY/61v7erQsXUDiiMVbW1sxit8IW9D46oVy1GwiiroYPckqHNLcHZy4C5wfnc8PDq9EVZHjYSMTVGAQQ4WjO/P40Lqiim4%2b7EwvM8ncO/4WmjRoBZXwM3DCYwURgQJ79cVxxp5OiVibhcTmzRtRE84mxxniIkYyN5/rwLcPb4GXeAonNi2ANITpwE8OAyX05fCkB7tMCakwffbY7hy4LcDkDg7DOImhTBMjXJIt7akgOYOdgUoHZbK29jXRicUsPHbLfMpr%2bu7t2/M4OdUkCn1Yd4/uysOVs4JA/jjKM8CcHsvwN2DHA/8hRbyCAMfAiG4kLqIQeZJGNClDcHh%2bQXt7YLyPCBC3xdBMAp3EODZCf2ZnbE8tfHFKjLzi95wcM1Mivb8/Vczh8EKlITZw%2bHktmjo06E5hA8KYIfWzmLN639AFrDmkxY%2b9vkBDovdqVfZvSxcSl9CKY/Jl3YyAj84cqDz8OQGiJ88GOZjEKSAyFEhpsJt8eN5kNyFARO/x46sn8M8ypcmBTRQ7psvwJBQAkVsmDum33P0d0Y5H3ebKwP%2bu5vgLjw/vw1xwHZ%2bza3jl31Gl0BlIBhi8OS4/vMefqSA8crW6/I%2bEFACIebtDYL0HFo3i4KbbFLC5Z2Moz1ygavJHPmRhRAoEmgwi76LcHh%2beDApYAndE%2bNAviBE4uVZwNZmAtUEihRyfEppEO4dNBD0JSXggpmICZwb8ICYzkkR3EhlZB2ogKyRQZ%2bRAqZyC9DkAwvI5tW7ZLHCPMAh1JWJ%2bMjKrovF0/tTSTFs3rggRimRGCHyBYMSAxrmJ0psigXoBuoJBzes4/VQifwypkSMBSkm8oMpkG2KHQdRY4Pg/nfrZMQMz4M7t6LFrxXRP3/Vw2x0NF9tJbcyArtrqlYqd/HvH7dA5vlt8r7VMxghQwI%2bnCP8%2bQ3A4%2bOMxgt7FkPbxnVo8Wlenm4OeTb94ST5OH1ELypYCDKUnZ%2bu2LhwLLE%2bPVkBcf0%2bHVog0GkNE4d0YxMGd2EDurZBXlCdgM8NivzHN8/T5lnTb1qvJh%2bRwGgsLdrJ0Z4obMvK7i5%2bzk4FF6GScPH7yP95FsCAx578sBm%2bjhkDYX0/ZYO6fyz369SSCNH1aWE9y6rvhawybyoBCYpp4ZXcXBxx%2bJjyP2rkWxwfFS5UECiKI6IjQCRT5FeCnjENXktRXOCo0QX%2bOibHRw6C6pXdTtkXsA0kBUrG5oqU1yxBg4vjPonU1cWlVLFoDHg3pVebGmz9gtEyQWL0e9PiReSnkdIi5n8OlDIp9T08Ki%2bfMdS8epyKUsGs5pB7LxudTmrl%2b6HpfVri1JwUPnnlR6PRPJBe7foYMGSbmhxJiyYwxAC81qdevNnIhGU08K7GO0bILdR9hDsoHla1hKLOTpr6H1bV1qtVVRs9vr8GkQj//FRStKWvf6laeJaq%2bmvq8ogdpGrwjiURBIR47U9WLV4IL43dPciIBCkIUt0lylTu%2bZ21soFFja5bMEqLuVmHnFyHKUynYnsxqqKnLFno%2bkhm3R%2bShFnDcZEHTKYvkCCHyKiczYgDzF1IdU/RJRqX666A5j8WI%2b9ZvHT%2bz4dVGyF0bYVSxNJ3HeztPlPaVuqOj8XFSxY6QeEhAUD1ARLadb7zuPiDa2eaSuca1fdV9xWK/hPFNTtsgPhDKl7UmV8XK%2bwkYQbi17ie7BXgUa5021VzRwAyr9Of92h3//ukGCpY3sTcnNapTYPJ6JO98cbN8KvuKCeNO6s1mE3wtUKLUhQHbRrVht8y1hjZH1pEWsJUsCtg%2b4rFWFCCsIK5lqwA7yF1bF1fXKMLA8kLoqZ7YegfVPWQEmeHmd67IG19uiUunLeo1s0fZTibHAfXD3wFVJq%2beTgBftgZCynLJz9Gd2CoTdHpydHi1YKT4GOp4kUgdcVkXgyx5C7ZKEFYwT2UEmorqOHpbloMAqzX1g1mjOylJeUE%2bjfRmpT4RVCHbcTLMQM8q%2b1VWR7Vv6N8OX2pgSO32%2bl6/JuBandIZtiNQwmsbePaOZn0a5WQnZu8RgGmZgvKIHMr8HQvq45ldpGh3VMGB/pNozdozba446%2bNG85ThvfIQIwOsZNCYEP0aP2G6DGGi3sWs79/3Mooj/%2bUukhOXzmNURX39xPrWcO6Xm%2bsBLFgjdIez%2bHvmPSi2XpQbQEInkQ80Hl7VQpEKz5DwTa0V/tQ86yPOx8a2rP94bEDOxPLDFNnAbv2zT6a49e07uM9CVPg6r5lQAwtY1OUjEGL8ciNIxUvqXIze1RfPjEbCztqJVEHW0qNVWjShZ0Kip2tgOn71MNTG3j3adYXfe7iZ22Qp9QuU6KoX9d2jSbNGd33PDVcIod2Bwz4T/DvC0SAUJtP%2baKFnUagRRzau3Ja5r1v1/JaHvy2n4l%2bHkFYKmJaiNrvQoQb9KHJLpseastr8aHd1lK5HV02kxjnnaMr9ed3x%2btPbF0g/3xwBY9lR9bPhi8jB2UGfOwrlyjqfBV/liR5e1Xmqy5ga6OZPDTQ3E88alWr2BEj9y9UzX12bqvMlBL3KcwW73jhwgqEApbRBAF%2b5EEvduLADCqxI9gycGRJm3b3gIw0Ww%2bPMgxUlqOyO%2bIbaNPQG9xcStJ95ovF8xG1IhVyctAgj7cByBRWUVIyntyC7YsjZF7EvJoMZGqlihc2HXN5hwowjwMSblI3XoW%2bsUdGBVAvguYpUyZLnBMGo4I7UIZ76lu7%2bq33PFzTypUpEUmNrFci4fSwXpJRqyChaesUrtAehYMf5PSM8jev9SOvb%2bJTUwmE2n9DARcRYtPOlURafV/hGzL6v%2bHBiXXQt2MLKOTosF8yHrJornAJu5ygYPNu71Dhe5za3k43Mjf8h8jjs01tVlSArPxPwgNOo/t3XMXb6leSs8gCfs1YDdUqlSci42dpUbS5bmVL6tBqtTniCGgJUfQ75P/6W0cSeauL43cMhIsmD37jVPg2SlD%2b312k4%2bHX9i8n06csRdmKkCYpyJfmjllN6%2bhgZ4NpV/smROqlGn9972p6weK4C2CqObZx7jsNgsqROhMoipsU8pwC37Nz26iZqqcKE34%2bW%2bEFto4O9lKbRt5vRpIwMHIF2BewXUT/MGJIVwOaPaNuDj/Tg9r%2b5dgqcCro8M6zAeZ21rTe%2b8Z5XElmvNKMm4NUnuoTpd%2b6kFrPu4rUr1NLHgMihwa2RvyMux1lQADERCeHguDf57ZCjSruOYWzb7HzxntX8XCF/atnsE0Lx8KZHbG8tqjQaT0dwhDApnAhR52aCP3fr8Yf1cC8GsIVED4oICQmYgARIz3V8kURgzc70Qpa%2bXpbOuiYqyKCLHIUjkJ5lelaChVXGBVa6TNkrpQdauZK1cjezlZCisxv0qB29ZmInoi%2b6jHQMFMcoMYm%2bl%2bPT5paPROIe1Pj5PC62RzVGeE55vxb6XpCeshS02i%2bGAc0RI3fstevRYJRXmhxJR1eEgoQdTxezLh/iAiH1RUgsszEId0ASRm3POog60kB9w8Zoo3HbYKU2JU71SKEvlwB7q6lNvMjLjfTDOqeXpZiAWMHdrK6CwgF0HkCyj7KPHghldwSER49X%2bCSq10kxM9cAZ3b%2bm7k9btrKXp1NfeFAjpbXQFC%2bAErhOJkifwMAVolNVNRQZtprv7NfbS5ZQCEmLgCggNapRP8xUUb1G1t4QJDe/tb1QUEzyji7AjX0df5maNLO03mHxnanf4ekOvF0hcKaH2YTnIqCoCXg%2bABCPRvYmUFGM2fzg/S8RoyeX7S5OoumTJRnRqVqZfopKBWTS4qwMgGe37aNIUfZ72SbLIAU2//HRAigS8qubkYzxGj33MkeveAns4eU7iieRK%2bF1XgXHld3ruUKwCh5BJqayO/Nij9PcYxAO4E7UiZkkWtSomFArw83XAOqTz48XSMbtnz02Z0lNbTKi30D6p6cH9CMjFYOfGl54GHWlg0AWSFVGGxduATGaBuTU%2be%2b/nu39mrv5i2mAjaSiPp8dGii1itY1Rt3rigx/DHUUJdpASZiqQYgBgdbyV2pmQAZg0RPUJUAOMKoIIHxqT%2bXVpTRae61fqF/s18pDlj%2bvEbV3AtNf/4pnnGY%2b1UEXp4BC6lLZGRlPDH3zQvngzLqRiklx%2bby1bQBfiInEPGmEOELPP45nmk8Fk0N3SNd3J4SoOLHYYRP2NhxMAHsRMHPlEOMFmVBKnv71q6uPHZAuQACM9PS8Yn0/6V4zPuSnkpAif3DY7pkvHJUHoUdhPKGsn4aGy8ws6In09HmYwyUTI%2bBzheJfR%2bkmQ8DjdDaX0tRFmMkojBleoRO5v61LyKgfh7ZH1UyKyUW6b/D5iHXD7Pi%2bNmAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"path":"/author/insutanto/"}]}},{"node":{"title":"Scrapy分布式爬虫，分布式队列和布隆过滤器，一分钟搞定？","path":"/posts/scrapy/","image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/sergio-souza-mvb51ThjvRA-unsplash.872e63c.21c81be30c0705f173d0a2b3e99d5aff.jpg","size":{"width":1600,"height":800},"sizes":"(max-width: 1600px) 100vw, 1600px","srcset":["/assets/static/sergio-souza-mvb51ThjvRA-unsplash.bb17b12.21c81be30c0705f173d0a2b3e99d5aff.jpg 480w","/assets/static/sergio-souza-mvb51ThjvRA-unsplash.b28baf0.21c81be30c0705f173d0a2b3e99d5aff.jpg 1024w","/assets/static/sergio-souza-mvb51ThjvRA-unsplash.872e63c.21c81be30c0705f173d0a2b3e99d5aff.jpg 1600w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1600 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ad20debd6b78d594c0aee06ced1b8022'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ad20debd6b78d594c0aee06ced1b8022)' width='1600' height='800' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABAUCAwYBB//EACwQAAIBAwMCAwgDAAAAAAAAAAECAwAEEQUSIRMxQVGRBhUiMmFxgaFi0eH/xAAXAQEBAQEAAAAAAAAAAAAAAAADBAIB/8QAHBEAAwEAAwEBAAAAAAAAAAAAAAECEQMSMSFh/9oADAMBAAIRAxEAPwDzeG8ujjpk48STTTSLd5JS15LLGO%2b5H5/dJU1FcYgkjTJ5wwzVpuZG6rSMWUtsyRk%2bYoOT8E4009ZpL65s44wI9Qu5SONq4/ZBoRtaeCA9NyFHi/xGlDXbbVeGLCuNgJOTnuaitykaIkhl6jDDeG0eQ44%2b1B0KewQdebJL5lb%2bRIFCzaxNKRtMUYznCJz61O9trW2aOKaFzJ0wx2AY3EZ58cChLuCzhlkCw3QROS3kOP7rcqH4jNd16NbTU0mXZc8N4OpOPyKaLdPZS7UYMhG7JUspHrWHN3GrZh3qv1OSasXU3WPAdwfoxArNcG%2bHZ5s9Eu6rormSMYjkdfsaFroNWNaRp4aDS7g3bOsoieRVHTjbsxHgB9vWrLcEXKG4i3Luzko2TyM854NJtMmMN9bv5OPTPNNISj6jbpau43NnJznvQ3ONlEVqQd7Rl/e1y/RKkvyCGLEEdjjjH%2bVKeacCA2kE7hIgH%2bYDg9sHgjt3BqOuCb3owMohDAbt8jLg48fril99qhigNusgnfduMoY4yfIfihhOpnB6amqb%2bBuq6faS9OaMNaCUZfKEpG3Yrkfmld7pNxa7vjSTaAx2nuD2I86AN3N0jEJX6Rbdtzxnzrkd1LH8kjLzniniLlZpPfJFPUsP/9k=' /%3e%3c/svg%3e"},"image_caption":"Photo by Steven Wong on Unsplash","excerpt":"使用Scrapy最快速的开发一个分布式爬虫，基于Scrapy，Rabbitmq 和 RedisBloom","content":"<p>使用Scrapy开发一个分布式爬虫？你知道最快的方法是什么吗？一分钟真的能 开发好或者修改出 一个分布式爬虫吗？</p>\n<p>话不多说，先让我们看看怎么实践，再详细聊聊细节~</p>\n<h2 id=\"快速上手\"><a href=\"#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>快速上手</h2>\n<h3 id=\"step-0\"><a href=\"#step-0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Step 0:</strong></h3>\n<p>首先安装 Scrapy-Distributed :</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install scrapy-distributed</code></pre></div>\n<p>(非必须)如果你没有所需要的运行条件，你可以启动两个 Docker 镜像进行测试 (RabbitMQ 和 RedisBloom):</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># pull and run a RabbitMQ container.</span>\ndocker run -d --name rabbitmq -p <span class=\"token number\">0.0</span>.0.0:15672:15672 -p <span class=\"token number\">0.0</span>.0.0:5672:5672 rabbitmq:3\n<span class=\"token comment\"># pull and run a RedisBloom container.</span>\ndocker run -d --name redis-redisbloom -p <span class=\"token number\">0.0</span>.0.0:6379:6379 redislabs/rebloom:latest</code></pre></div>\n<h3 id=\"step-1-非必须\"><a href=\"#step-1-%E9%9D%9E%E5%BF%85%E9%A1%BB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 1 (非必须):</h3>\n<p>如果你有一个现成的爬虫，可以跳过这个 Step，直接到 Step 2。</p>\n<p>创建一个爬虫工程，我这里以一个 sitemap 爬虫为例:</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">scrapy startproject simple_example</code></pre></div>\n<p>然后修改 spiders 文件夹下的爬虫程序文件:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> scrapy_distributed<span class=\"token punctuation\">.</span>spiders<span class=\"token punctuation\">.</span>sitemap <span class=\"token keyword\">import</span> SitemapSpider\n<span class=\"token keyword\">from</span> scrapy_distributed<span class=\"token punctuation\">.</span>queues<span class=\"token punctuation\">.</span>amqp <span class=\"token keyword\">import</span> QueueConfig\n<span class=\"token keyword\">from</span> scrapy_distributed<span class=\"token punctuation\">.</span>dupefilters<span class=\"token punctuation\">.</span>redis_bloom <span class=\"token keyword\">import</span> RedisBloomConfig\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySpider</span><span class=\"token punctuation\">(</span>SitemapSpider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"example\"</span>\n    sitemap_urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"http://www.people.com.cn/robots.txt\"</span><span class=\"token punctuation\">]</span>\n    queue_conf<span class=\"token punctuation\">:</span> QueueConfig <span class=\"token operator\">=</span> QueueConfig<span class=\"token punctuation\">(</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> durable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> arguments<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"x-queue-mode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x-max-priority\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    redis_bloom_conf<span class=\"token punctuation\">:</span> RedisBloomConfig <span class=\"token operator\">=</span> RedisBloomConfig<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"example:dupefilter\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"parse response, url: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"step-2\"><a href=\"#step-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Step 2:</strong></h3>\n<p>只需要修改配置文件 settings.py 下的<code class=\"language-text\">SCHEDULER</code>, <code class=\"language-text\">DUPEFILTER_CLASS</code> 并且添加 RabbitMQ 和 Redis 的相关配置，你就可以马上获得一个分布式爬虫，Scrapy-Distributed 会帮你初始化一个默认配置的 RabbitMQ 队列和一个默认配置的 RedisBloom 布隆过滤器。</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 同时集成 RabbitMQ 和 RedisBloom 的 Scheduler</span>\n<span class=\"token comment\"># 如果仅使用 RabbitMQ 的 Scheduler，这里可以填 scrapy_distributed.schedulers.amqp.RabbitScheduler</span>\nSCHEDULER <span class=\"token operator\">=</span> <span class=\"token string\">\"scrapy_distributed.schedulers.DistributedScheduler\"</span>\nSCHEDULER_QUEUE_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"scrapy_distributed.queues.amqp.RabbitQueue\"</span>\nRABBITMQ_CONNECTION_PARAMETERS <span class=\"token operator\">=</span> <span class=\"token string\">\"amqp://guest:guest@localhost:5672/example/?heartbeat=0\"</span>\nDUPEFILTER_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"scrapy_distributed.dupefilters.redis_bloom.RedisBloomDupeFilter\"</span>\nBLOOM_DUPEFILTER_REDIS_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"redis://:@localhost:6379/0\"</span>\nBLOOM_DUPEFILTER_REDIS_HOST <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span>\nBLOOM_DUPEFILTER_REDIS_PORT <span class=\"token operator\">=</span> <span class=\"token number\">6379</span>\n<span class=\"token comment\"># Redis Bloom 的客户端配置，复制即可</span>\nREDIS_BLOOM_PARAMS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"redis_cls\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redisbloom.client.Client\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 布隆过滤器误判率配置，不写配置的情况下默认为 0.001</span>\nBLOOM_DUPEFILTER_ERROR_RATE <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\n<span class=\"token comment\"># 布隆过滤器容量配置，不写配置的情况下默认为 100_0000</span>\nBLOOM_DUPEFILTER_CAPACITY <span class=\"token operator\">=</span> 100_0000</code></pre></div>\n<p>你也可以给你的 Spider 类，增加两个类属性，来初始化你的 RabbitMQ 队列或 RedisBloom 布隆过滤器:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySpider</span><span class=\"token punctuation\">(</span>SitemapSpider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\"># 通过 arguments 参数，可以配置更多参数，这里示例配置了 lazy 模式和优先级最大值</span>\n    queue_conf<span class=\"token punctuation\">:</span> QueueConfig <span class=\"token operator\">=</span> QueueConfig<span class=\"token punctuation\">(</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> durable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> arguments<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"x-queue-mode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x-max-priority\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\"># 通过 key，error_rate，capacity 分别配置布隆过滤器的redis key，误判率，和容量</span>\n    redis_bloom_conf<span class=\"token punctuation\">:</span> RedisBloomConfig <span class=\"token operator\">=</span> RedisBloomConfig<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"example:dupefilter\"</span><span class=\"token punctuation\">,</span> error_rate<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">=</span>100_0000<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3 id=\"step-3\"><a href=\"#step-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Step 3:</strong></h3>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scrapy crawl &lt;your_spider&gt;</code></pre></div>\n<p>检查一下你的 RabbitMQ 队列 和 RedisBloom 过滤器，是不是已经正常运行了？</p>\n<p>可以看到，Scrapy-Distributed 的加持下，我们只需要修改配置文件，就可以将普通爬虫修改成支持 RabbitMQ 队列 和 RedisBloom 布隆过滤器的分布式爬虫。在拥有 RabbitMQ 和 RedisBloom 环境的情况下，修改配置的时间也就一分钟。😂</p>\n<h2 id=\"关于scrapy-distributed\"><a href=\"#%E5%85%B3%E4%BA%8Escrapy-distributed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>关于Scrapy-Distributed</h2>\n<p>目前 Scrapy-Distributed 主要参考了Scrapy-Redis 和 scrapy-rabbitmq 这两个库。</p>\n<p>如果你有过 Scrapy 的相关经验，可能会知道 Scrapy-Redis 这个库，可以很快速的做分布式爬虫，如果你尝试过使用 RabbitMQ 作为爬虫的任务队列，你可能还见到过 scrapy-rabbitmq 这个项目。诚然 Scrapy-Redis 已经很方便了，scrapy-rabbitmq 也能实现 RabbitMQ 作为任务队列，但是他们存在一些缺陷，我这里简单提出几个问题。</p>\n<ol>\n<li>Scrapy-Redis 使用 Redis 的 set 去重，链接数量越大占用的内存就越大，不适合任务数量大的分布式爬虫。</li>\n<li>Scrapy-Redis 使用 Redis 的 list 作为队列，很多场景会有任务积压，会导致内存资源消耗过快，比如我们爬取网站 sitemap 时，链接入队的速度远远大于出队。</li>\n<li>scrapy-rabbitmq 等 RabbitMQ 的 Scrapy 组件，在创建队列方面，没有提供 RabbitMQ 支持的各种参数，无法控制队列的持久化等参数。</li>\n<li>scrapy-rabbitmq 等 rabbitmq 框架的 Scheduler 暂未支持分布式的 dupefilter ，需要使用者自行开发或接入相关组件。</li>\n<li>Scrapy-Redis 和 scrapy-rabbitmq 等框架都是侵入式的，如果需要用这些框架开发分布式的爬虫，需要我们修改自己的爬虫代码，通过继承框架的 Spider 类，才能实现分布式功能。</li>\n</ol>\n<p>于是，Scrapy-Distributed 框架就在这个时候诞生了，在非侵入式设计下，你只需要通过修改 settings.py 下的配置，框架就可以根据默认配置将你的爬虫分布式化。</p>\n<p>为了解决Scrapy-Redis 和 scrapy-rabbitmq 存在的一些痛点，Scrapy-Distributed 做了下面几件事:</p>\n<ol>\n<li>采用了 RedisBloom 的布隆过滤器，内存占用更少。</li>\n<li>支持了 RabbitMQ 队列声明的所有参数配置，可以让 RabbitMQ 队列支持 lazy-mode 模式，将减少内存占用。</li>\n<li>RabbitMQ 的队列声明更加灵活，不同爬虫可以使用相同队列配置，也可以使用不同的队列配置。</li>\n<li>Scheduler 的设计上支持多个组件的搭配组合，可以单独使用 RedisBloom 的DupeFilter，也可以单独使用 RabbitMQ 的 Scheduler 模块。</li>\n<li>实现了 Scrapy 分布式化的非侵入式设计，只需要修改配置，就可以将普通爬虫分布式化。</li>\n</ol>\n<p>目前框架还有很多功能正在添加，感兴趣的小伙伴可以持续关注项目仓库的动向，有什么想法也可以一起讨论。</p>\n<p>Scrapy-Distributed 的 github 仓库地址：<a href=\"https://github.com/Insutanto/scrapy-distributed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Insutanto/scrapy-distributed</a></p>\n","humanTime":"15 August 2020","datetime":"Sat Aug 15 2020 12:00:00 UTC+00:00","timeToRead":6,"tags":[{"id":"Python","title":"Python","path":"/tags/python/"},{"id":"Scrapy","title":"Scrapy","path":"/tags/scrapy/"},{"id":"Distributed","title":"Distributed","path":"/tags/distributed/"}],"category":{"id":"Technology","title":"Technology","path":"/category/technology/","belongsTo":{"totalCount":5,"edges":[{"node":{"title":"PySpark UDF的坑与绕","path":"/posts/py-spark-udf/"}},{"node":{"title":"Neo4j schema 索引对查询的影响","path":"/posts/neo4j-schema/"}},{"node":{"title":"(翻译)Scalene - 一个 Python 的高性能 CPU 内存分析器","path":"/posts/scalene-python-cpu/"}},{"node":{"title":"Scrapy分布式爬虫，分布式队列和布隆过滤器，一分钟搞定？","path":"/posts/scrapy/"}}]}},"author":[{"id":"insutanto","name":"许臾insutanto","image":{"type":"image","mimeType":"image/png","src":"/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png","size":{"width":400,"height":374},"sizes":"(max-width: 400px) 100vw, 400px","srcset":["/assets/static/author1.fac0014.f32b3d6345829593250abc8f3b922256.png 400w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 400 374' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9ba158a90cb545680afa9a5f3c8a4b2f)' width='400' height='374' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA8CAYAAADWibxkAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPRUlEQVRo3tVbB1hUxxa%2buwsCgtgLoiAqRkUTgxp8ir0HJYkFC3ZQ0YiKxoai2BsqCMEawW6sqIgIdo2YqNEYjf0ZWxJLTGKJyO6dk3Nm76zXdfHxlDWw33e%2bubvsXmbOnPL/58yVJOu8NBY%2bK4/SASUC5SuU7Si7UL5GiUYZiVIPpZAir7tXnn5plfF9lFiULii7UZ6iQA7kIcofKKtQiudHJYjJLrewOBklC0WPYlBEr/rM/PvH8tvui8UXQ7mlLEKvCFMJ/I/3sqIcUFwm31mBLcp5ZQEGswXy3dVqNXzUaNTXGrzWMvpMsQoa481cK0%2b/dMoYrFo8U5u1VqMxXeu0WovXigXQ%2bBilTH60gGNmu2/aYbHY9s0%2b4tfDevtDF7%2bG/NqvSV3wb%2b7Dijg76m1tbeizhPy0%2b2KHKis7J3aSqU2%2bf5fWsGLWMICbe2DGyN5wLiUe4P4hWDJ1CBzdMAfgzl72%2bMymrFmj%2btD3h9MNnQra2%2bQn829lbv42Njq%2b%2bPc8XIFd3gnw636QL%2b3gI1zb9eL6%2bm7I%2bimJwe9H9N98PZd%2bM5RuWLF8mXylgJ6q6P%2bSz%2b9bNR13Pg2endsKcCUZDBd3oGwH/YXt8PynJNDjtYGUcX23/tdjq6F4kULr6Yb%2bzXx0%2bSEGCAX0EwpAn2di52MnhvDFw610gBt7%2bIKzLiTxa7779DeSq7sYuoGMbgCeFcpeUwXBfGMB7RSz57m/RDFnoN2Eh0cAbqfDnoSpEDNhACydHgrLUBZP%2bRw2x4XDD8lxcARjQFriVDZ6QCc2LiQAqni4PqM0qNNp%2b1MoQCmQ5yEwBrsW6rxfq1pFSFkeCVu%2bDOcBcMqwQDi9YyHMGxcMwQGtwLeOF2CQg/IuJcCjXGkoW6oY/61v7erQsXUDiiMVbW1sxit8IW9D46oVy1GwiiroYPckqHNLcHZy4C5wfnc8PDq9EVZHjYSMTVGAQQ4WjO/P40Lqiim4%2b7EwvM8ncO/4WmjRoBZXwM3DCYwURgQJ79cVxxp5OiVibhcTmzRtRE84mxxniIkYyN5/rwLcPb4GXeAonNi2ANITpwE8OAyX05fCkB7tMCakwffbY7hy4LcDkDg7DOImhTBMjXJIt7akgOYOdgUoHZbK29jXRicUsPHbLfMpr%2bu7t2/M4OdUkCn1Yd4/uysOVs4JA/jjKM8CcHsvwN2DHA/8hRbyCAMfAiG4kLqIQeZJGNClDcHh%2bQXt7YLyPCBC3xdBMAp3EODZCf2ZnbE8tfHFKjLzi95wcM1Mivb8/Vczh8EKlITZw%2bHktmjo06E5hA8KYIfWzmLN639AFrDmkxY%2b9vkBDovdqVfZvSxcSl9CKY/Jl3YyAj84cqDz8OQGiJ88GOZjEKSAyFEhpsJt8eN5kNyFARO/x46sn8M8ypcmBTRQ7psvwJBQAkVsmDum33P0d0Y5H3ebKwP%2bu5vgLjw/vw1xwHZ%2bza3jl31Gl0BlIBhi8OS4/vMefqSA8crW6/I%2bEFACIebtDYL0HFo3i4KbbFLC5Z2Moz1ygavJHPmRhRAoEmgwi76LcHh%2beDApYAndE%2bNAviBE4uVZwNZmAtUEihRyfEppEO4dNBD0JSXggpmICZwb8ICYzkkR3EhlZB2ogKyRQZ%2bRAqZyC9DkAwvI5tW7ZLHCPMAh1JWJ%2bMjKrovF0/tTSTFs3rggRimRGCHyBYMSAxrmJ0psigXoBuoJBzes4/VQifwypkSMBSkm8oMpkG2KHQdRY4Pg/nfrZMQMz4M7t6LFrxXRP3/Vw2x0NF9tJbcyArtrqlYqd/HvH7dA5vlt8r7VMxghQwI%2bnCP8%2bQ3A4%2bOMxgt7FkPbxnVo8Wlenm4OeTb94ST5OH1ELypYCDKUnZ%2bu2LhwLLE%2bPVkBcf0%2bHVog0GkNE4d0YxMGd2EDurZBXlCdgM8NivzHN8/T5lnTb1qvJh%2bRwGgsLdrJ0Z4obMvK7i5%2bzk4FF6GScPH7yP95FsCAx578sBm%2bjhkDYX0/ZYO6fyz369SSCNH1aWE9y6rvhawybyoBCYpp4ZXcXBxx%2bJjyP2rkWxwfFS5UECiKI6IjQCRT5FeCnjENXktRXOCo0QX%2bOibHRw6C6pXdTtkXsA0kBUrG5oqU1yxBg4vjPonU1cWlVLFoDHg3pVebGmz9gtEyQWL0e9PiReSnkdIi5n8OlDIp9T08Ki%2bfMdS8epyKUsGs5pB7LxudTmrl%2b6HpfVri1JwUPnnlR6PRPJBe7foYMGSbmhxJiyYwxAC81qdevNnIhGU08K7GO0bILdR9hDsoHla1hKLOTpr6H1bV1qtVVRs9vr8GkQj//FRStKWvf6laeJaq%2bmvq8ogdpGrwjiURBIR47U9WLV4IL43dPciIBCkIUt0lylTu%2bZ21soFFja5bMEqLuVmHnFyHKUynYnsxqqKnLFno%2bkhm3R%2bShFnDcZEHTKYvkCCHyKiczYgDzF1IdU/RJRqX666A5j8WI%2b9ZvHT%2bz4dVGyF0bYVSxNJ3HeztPlPaVuqOj8XFSxY6QeEhAUD1ARLadb7zuPiDa2eaSuca1fdV9xWK/hPFNTtsgPhDKl7UmV8XK%2bwkYQbi17ie7BXgUa5021VzRwAyr9Of92h3//ukGCpY3sTcnNapTYPJ6JO98cbN8KvuKCeNO6s1mE3wtUKLUhQHbRrVht8y1hjZH1pEWsJUsCtg%2b4rFWFCCsIK5lqwA7yF1bF1fXKMLA8kLoqZ7YegfVPWQEmeHmd67IG19uiUunLeo1s0fZTibHAfXD3wFVJq%2beTgBftgZCynLJz9Gd2CoTdHpydHi1YKT4GOp4kUgdcVkXgyx5C7ZKEFYwT2UEmorqOHpbloMAqzX1g1mjOylJeUE%2bjfRmpT4RVCHbcTLMQM8q%2b1VWR7Vv6N8OX2pgSO32%2bl6/JuBandIZtiNQwmsbePaOZn0a5WQnZu8RgGmZgvKIHMr8HQvq45ldpGh3VMGB/pNozdozba446%2bNG85ThvfIQIwOsZNCYEP0aP2G6DGGi3sWs79/3Mooj/%2bUukhOXzmNURX39xPrWcO6Xm%2bsBLFgjdIez%2bHvmPSi2XpQbQEInkQ80Hl7VQpEKz5DwTa0V/tQ86yPOx8a2rP94bEDOxPLDFNnAbv2zT6a49e07uM9CVPg6r5lQAwtY1OUjEGL8ciNIxUvqXIze1RfPjEbCztqJVEHW0qNVWjShZ0Kip2tgOn71MNTG3j3adYXfe7iZ22Qp9QuU6KoX9d2jSbNGd33PDVcIod2Bwz4T/DvC0SAUJtP%2baKFnUagRRzau3Ja5r1v1/JaHvy2n4l%2bHkFYKmJaiNrvQoQb9KHJLpseastr8aHd1lK5HV02kxjnnaMr9ed3x%2btPbF0g/3xwBY9lR9bPhi8jB2UGfOwrlyjqfBV/liR5e1Xmqy5ga6OZPDTQ3E88alWr2BEj9y9UzX12bqvMlBL3KcwW73jhwgqEApbRBAF%2b5EEvduLADCqxI9gycGRJm3b3gIw0Ww%2bPMgxUlqOyO%2bIbaNPQG9xcStJ95ovF8xG1IhVyctAgj7cByBRWUVIyntyC7YsjZF7EvJoMZGqlihc2HXN5hwowjwMSblI3XoW%2bsUdGBVAvguYpUyZLnBMGo4I7UIZ76lu7%2bq33PFzTypUpEUmNrFci4fSwXpJRqyChaesUrtAehYMf5PSM8jev9SOvb%2bJTUwmE2n9DARcRYtPOlURafV/hGzL6v%2bHBiXXQt2MLKOTosF8yHrJornAJu5ygYPNu71Dhe5za3k43Mjf8h8jjs01tVlSArPxPwgNOo/t3XMXb6leSs8gCfs1YDdUqlSci42dpUbS5bmVL6tBqtTniCGgJUfQ75P/6W0cSeauL43cMhIsmD37jVPg2SlD%2b312k4%2bHX9i8n06csRdmKkCYpyJfmjllN6%2bhgZ4NpV/smROqlGn9972p6weK4C2CqObZx7jsNgsqROhMoipsU8pwC37Nz26iZqqcKE34%2bW%2bEFto4O9lKbRt5vRpIwMHIF2BewXUT/MGJIVwOaPaNuDj/Tg9r%2b5dgqcCro8M6zAeZ21rTe%2b8Z5XElmvNKMm4NUnuoTpd%2b6kFrPu4rUr1NLHgMihwa2RvyMux1lQADERCeHguDf57ZCjSruOYWzb7HzxntX8XCF/atnsE0Lx8KZHbG8tqjQaT0dwhDApnAhR52aCP3fr8Yf1cC8GsIVED4oICQmYgARIz3V8kURgzc70Qpa%2bXpbOuiYqyKCLHIUjkJ5lelaChVXGBVa6TNkrpQdauZK1cjezlZCisxv0qB29ZmInoi%2b6jHQMFMcoMYm%2bl%2bPT5paPROIe1Pj5PC62RzVGeE55vxb6XpCeshS02i%2bGAc0RI3fstevRYJRXmhxJR1eEgoQdTxezLh/iAiH1RUgsszEId0ASRm3POog60kB9w8Zoo3HbYKU2JU71SKEvlwB7q6lNvMjLjfTDOqeXpZiAWMHdrK6CwgF0HkCyj7KPHghldwSER49X%2bCSq10kxM9cAZ3b%2bm7k9btrKXp1NfeFAjpbXQFC%2bAErhOJkifwMAVolNVNRQZtprv7NfbS5ZQCEmLgCggNapRP8xUUb1G1t4QJDe/tb1QUEzyji7AjX0df5maNLO03mHxnanf4ekOvF0hcKaH2YTnIqCoCXg%2bABCPRvYmUFGM2fzg/S8RoyeX7S5OoumTJRnRqVqZfopKBWTS4qwMgGe37aNIUfZ72SbLIAU2//HRAigS8qubkYzxGj33MkeveAns4eU7iieRK%2bF1XgXHld3ruUKwCh5BJqayO/Nij9PcYxAO4E7UiZkkWtSomFArw83XAOqTz48XSMbtnz02Z0lNbTKi30D6p6cH9CMjFYOfGl54GHWlg0AWSFVGGxduATGaBuTU%2be%2b/nu39mrv5i2mAjaSiPp8dGii1itY1Rt3rigx/DHUUJdpASZiqQYgBgdbyV2pmQAZg0RPUJUAOMKoIIHxqT%2bXVpTRae61fqF/s18pDlj%2bvEbV3AtNf/4pnnGY%2b1UEXp4BC6lLZGRlPDH3zQvngzLqRiklx%2bby1bQBfiInEPGmEOELPP45nmk8Fk0N3SNd3J4SoOLHYYRP2NhxMAHsRMHPlEOMFmVBKnv71q6uPHZAuQACM9PS8Yn0/6V4zPuSnkpAif3DY7pkvHJUHoUdhPKGsn4aGy8ws6In09HmYwyUTI%2bBzheJfR%2bkmQ8DjdDaX0tRFmMkojBleoRO5v61LyKgfh7ZH1UyKyUW6b/D5iHXD7Pi%2bNmAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"path":"/author/insutanto/"}]}}]}},"context":{"recordId":"e9ad36fa4b1168cbff692317669a35cd","tags":["Python","Profile"]}}